Inductive False : Prop :=.
Inductive True : Prop :=
    | I : True.
Inductive and (Prop) (Prop) : Prop :=
    | conj : forall['1] (forall['1] (((and) ('3)) ('2))).
Inductive or (Prop) (Prop) : Prop :=
    | or_introl : forall['1] (((or) ('2)) ('1))
    | or_intror : forall['0] (((or) ('2)) ('1)).
Inductive ex (Set) (forall['0] (Prop)) : Prop :=
    | ex_intro : forall['1] (forall[('1) ('0)] (((ex) ('3)) ('2))).
Inductive eq (Set) ('0) : forall['1] (Prop) :=
    | eq_refl : (((eq) ('1)) ('0)) ('0).
Definition ex_falso : forall[Prop] (forall[False] ('1)) := fun[Prop] (fun[False] (match '0 in False return '2 with end)).
Definition and_elem : forall[Prop] (forall[Prop] (forall[Prop] (forall[forall['2] (forall['2] ('2))] (forall[((and) ('3)) ('2)] ('2))))) := fun[Prop] (fun[Prop] (fun[Prop] (fun[forall['2] (forall['2] ('2))] (fun[((and) ('3)) ('2)] (match '0 in and return '5 with (('5) ('1)) ('0) end))))).
Definition or_elem : forall[Prop] (forall[Prop] (forall[Prop] (forall[forall['2] ('1)] (forall[forall['2] ('2)] (forall[((or) ('4)) ('3)] ('3)))))) := fun[Prop] (fun[Prop] (fun[Prop] (fun[forall['2] ('1)] (fun[forall['2] ('2)] (fun[((or) ('4)) ('3)] (match '0 in or return '6 with ('5) ('0) | ('4) ('0) end)))))).
Definition ex_elem : forall[Set] (forall[forall['0] (Prop)] (forall[Prop] (forall[forall['2] (forall[('2) ('0)] ('2))] (forall[((ex) ('3)) ('2)] ('2))))) := fun[Set] (fun[forall['0] (Prop)] (fun[Prop] (fun[forall['2] (forall[('2) ('0)] ('2))] (fun[((ex) ('3)) ('2)] (match '0 in ex return '5 with (('5) ('1)) ('0) end))))).
Definition eq_elem : forall[Set] (forall['0] (forall[forall['1] (Prop)] (forall[('0) ('1)] (forall['3] (forall[(((eq) ('4)) ('3)) ('0)] (('3) ('1))))))) := fun[Set] (fun['0] (fun[forall['1] (Prop)] (fun[('0) ('1)] (fun['3] (fun[(((eq) ('4)) ('3)) ('0)] (match '0 in eq return ('7) ('1) with '4 end)))))).
Definition eq_sym : forall[Set] (forall['0] (forall['1] (forall[(((eq) ('2)) ('1)) ('0)] ((((eq) ('3)) ('1)) ('2))))) := fun[Set] (fun['0] (fun['1] (fun[(((eq) ('2)) ('1)) ('0)] (match '0 in eq return (((eq) ('7)) ('1)) ('6) with ((eq_refl) ('5)) ('4) end)))).
Definition eq_trans : forall[Set] (forall['0] (forall['1] (forall['2] (forall[(((eq) ('3)) ('2)) ('1)] (forall[(((eq) ('4)) ('2)) ('1)] ((((eq) ('5)) ('4)) ('2))))))) := fun[Set] (fun['0] (fun['1] (fun['2] (fun[(((eq) ('3)) ('2)) ('1)] (fun[(((eq) ('4)) ('2)) ('1)] (match '0 in eq return (((eq) ('9)) ('8)) ('1) with '3 end)))))).
Definition f_equal : forall[Set] (forall[Set] (forall[forall['1] ('1)] (forall['2] (forall['3] (forall[(((eq) ('4)) ('1)) ('0)] ((((eq) ('4)) (('3) ('2))) (('3) ('1)))))))) := fun[Set] (fun[Set] (fun[forall['1] ('1)] (fun['2] (fun['3] (fun[(((eq) ('4)) ('1)) ('0)] (match '0 in eq return (((eq) ('8)) (('7) ('6))) (('7) ('1)) with ((eq_refl) ('6)) (('5) ('4)) end)))))).

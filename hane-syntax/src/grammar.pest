commands = _{ SOI ~ command* ~ EOI }
command = _{ command_definition | command_axiom | command_inductive }
command_definition = {
    keyword_definition ~ ident ~ ":" ~ expr ~ ":=" ~ expr ~ "."
}
command_axiom = { keyword_axiom ~ ident ~ ":" ~ expr ~ "." }
command_inductive = { keyword_inductive ~ inductive_body ~ (keyword_with ~ inductive_body)* ~ "." }

inductive_body = { ident ~ binders_opt ~ ":" ~ expr ~ ":=" ~ inductive_constructors }
inductive_constructors = { inductive_constructor? ~ ("|" ~ inductive_constructor)* }
inductive_constructor = { ident ~ ":" ~ expr }

expr = { expr_inner+ }
expr_inner = _{
    expr_paren | sort | expr_var | expr_product | expr_abstract | expr_let_bind |
    expr_match
}
expr_paren = { "(" ~ expr ~ ")" }
expr_var = { ident }
expr_product = { keyword_forall ~ binders ~ "," ~ expr }
expr_abstract = { keyword_fun ~ binders ~ "=>" ~ expr }
expr_let_bind = {
    keyword_let ~ ident ~ ":" ~ expr ~ ":=" ~ expr ~ keyword_in ~ expr
}
expr_match = {
    keyword_match ~ expr ~ keyword_as ~ ident ~ keyword_in ~ pattern ~ keyword_return ~ expr ~
    keyword_with ~ expr_match_arms ~ keyword_end
}
expr_match_arms = { expr_match_arm? ~ ("|" ~ expr_match_arm)* }
expr_match_arm = { pattern ~ "=>" ~ expr }
pattern = { ident ~ ident* }

binders_opt = { binder_base | binder_paren* }
binders = { binder_base | binder_paren+ }
binder_paren = _{ "(" ~ binder_base ~ ")" }
binder_base = { ident ~ ":" ~ expr}


sort = { sort_prop | sort_set | sort_type }
sort_prop = { keyword_prop }
sort_set = { keyword_set }
sort_type = { keyword_type ~ "{" ~ number ~ "}" }

keyword = _{
    keyword_definition
   | keyword_axiom
   | keyword_inductive
   | keyword_with
   | keyword_prop
   | keyword_set
   | keyword_type
   | keyword_forall
   | keyword_fun
   | keyword_let
   | keyword_in
   | keyword_match
   | keyword_return
   | keyword_as
   | keyword_end
}
keyword_definition = @{ "Definition" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_axiom = @{ "Axiom" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_inductive = @{ "Inductive" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_with = @{ "with" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_prop = @{ "Prop" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_set = @{ "Set" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_type = @{ "Type" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_forall = @{ "forall" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_fun = @{ "fun" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_let = @{ "let" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_in = @{ "in" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_match = @{ "match" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_return = @{ "return" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_as = @{ "as" ~ !(ASCII_ALPHANUMERIC | "_") }
keyword_end = @{ "end" ~ !(ASCII_ALPHANUMERIC | "_") }

number = @{ ASCII_DIGIT+ }

ident = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\n" | "\r" }
COMMENT = _{ "(*" ~ (!"*)" ~ (COMMENT | ANY))* ~ "*)" }
